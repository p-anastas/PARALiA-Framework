
import argparse
import os
import fnmatch
import pandas as pd
from sklearn.linear_model import LinearRegression

parser = argparse.ArgumentParser(description='Translate Deployment Phase Transfer Microbenchmark Outputs to transfer models and slowdown tables for the Autotuning Runtime')
parser.add_argument("-i", "--inputdir", type=str,help="Deployment Phase's microbenchmark output directory")
parser.add_argument("-o", "--outputdir", type=str,help="File store directory")
parser.add_argument("-d", "--dev_id", type=int, default=0, help="The GPU device's ID")
parser.add_argument("-l", "--libID", type=int, help="The ID of the backened library used.")

args = parser.parse_args()

InDataDir = args.inputdir
OutDataDir = args.outputdir
dev_id = args.dev_id
libID= args.libID

if (libID == 0): # CuCuBLAS
	infile_libname = 'cublas'
else:
	exit("Invalid libID")

version='@PROJECT_VERSION@'
devices=@NUM_LOCATIONS@

entries = os.listdir(InDataDir)
outdata = pd.DataFrame()
for other_dev_id in range(-1,devices-1):
	if other_dev_id == dev_id:
		continue
	if (libID == 0): # CuCuBLAS
		infile_recv = "%s/CuCuBLAS_link_benchmark_loc_dest-%d_loc_src-%d_%s.log" % (InDataDir, dev_id, other_dev_id, version)
		infile_recv_over = "%s/CuCuBLAS_link_overlap_benchmark_loc_dest-%d_loc_src-%d_%s.log" % (InDataDir, dev_id, other_dev_id, version)
	else :
		exit("Benchmark fine input: Invalid libID")
	indata_recv = pd.read_csv(infile_recv, names = ['dim1', 'dim2', 'transfer_t', 'error','reps','benchmark_t'])
	indata_recv['bytes'] = indata_recv['dim1']*indata_recv['dim2']*8 #assumption about double benchmarks, does not matter in regression.
	indata_recv_over = pd.read_csv(infile_recv_over, names = ['over_loc_dest', 'over_loc_src', 'transfer_t', 'over_transfer_t','over_reps','benchmark_t'])
	#print(indata_recv)
	#print(indata_recv_over)

	model = LinearRegression()
	model.fit(indata_recv[['bytes']], indata_recv[['transfer_t']])
	G_recv = model.coef_[0][0]
	inter_recv = abs(model.intercept_[0])

	print("\nLogP " + str(other_dev_id) + "->" + str(dev_id) + " model")
	print("Intercept = " +  str(inter_recv))
	print("Coefficient = " +  str(G_recv))

	outfile_recv_name = "%s/Link-Stats_loc_dest-%d_loc_src-%d.log" % (OutDataDir, dev_id, other_dev_id)
	f = open(outfile_recv_name, 'w')
	f.write('Intercept: ' + str(inter_recv) + '\n')
	f.write('Coefficient: ' + str(G_recv) + '\n')
	for index, row in indata_recv_over.iterrows():
		#print(row)
		#print('Slowdown([%d]->[%d]): ' % (row['over_loc_src'], row['over_loc_dest']) + str(row['over_transfer_t']/row['transfer_t']))
		f.write('Slowdown([%d]->[%d]): ' % (row['over_loc_src'], row['over_loc_dest']) + str(row['over_transfer_t']/row['transfer_t']) + '\n')
	f.close()
